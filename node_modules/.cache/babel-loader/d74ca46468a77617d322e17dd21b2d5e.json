{"ast":null,"code":"import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createRootReducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from '@redux-saga/core';\nimport rootSaga from './sagas';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\nexport const history = createBrowserHistory();\nconst composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nexport default function configureStore(preloadedState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const persistedReducer = persistReducer(persistConfig, createRootReducer(history));\n  const store = createStore(persistedReducer,\n  // root reducer with router state\n  preloadedState, composeEnhancers(applyMiddleware(routerMiddleware(history),\n  // for dispatching history actions\n  thunk, sagaMiddleware\n  // ... other middlewares ...\n  )));\n\n  const persistor = persistStore(store);\n  sagaMiddleware.run(rootSaga);\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"names":["routerMiddleware","createBrowserHistory","applyMiddleware","compose","createStore","createRootReducer","thunk","createSagaMiddleware","rootSaga","persistStore","persistReducer","storage","history","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","persistConfig","key","configureStore","preloadedState","sagaMiddleware","persistedReducer","store","persistor","run"],"sources":["D:/TYSCRIPT/Store Intern PG/login/src/redux/configureStore.ts"],"sourcesContent":["import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createRootReducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from '@redux-saga/core';\nimport rootSaga from './sagas';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\n\nexport const history = createBrowserHistory();\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport default function configureStore(preloadedState: any) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const persistedReducer = persistReducer(\n    persistConfig,\n    createRootReducer(history),\n  );\n\n  const store = createStore(\n    persistedReducer, // root reducer with router state\n    preloadedState,\n    composeEnhancers(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        thunk,\n        sagaMiddleware,\n        // ... other middlewares ...\n      ),\n    ),\n  );\n\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(rootSaga);\n\n  return { store, persistor };\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,eAAe,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC7D,OAAOC,iBAAiB,MAAM,WAAW;AACzC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,oBAAoB,MAAM,kBAAkB;AACnD,OAAOC,QAAQ,MAAM,SAAS;AAC9B,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,mCAAmC;AAEvD,OAAO,MAAMC,OAAO,GAAGX,oBAAoB,EAAE;AAE7C,MAAMY,gBAAgB,GACnB,OAAOC,MAAM,KAAK,WAAW,IAC3BA,MAAM,CAASC,oCAAoC,IACtDZ,OAAO;AAET,MAAMa,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXN;AACF,CAAC;AAED,eAAe,SAASO,cAAcA,CAACC,cAAmB,EAAE;EAC1D,MAAMC,cAAc,GAAGb,oBAAoB,EAAE;EAE7C,MAAMc,gBAAgB,GAAGX,cAAc,CACrCM,aAAa,EACbX,iBAAiB,CAACO,OAAO,CAAC,CAC3B;EAED,MAAMU,KAAK,GAAGlB,WAAW,CACvBiB,gBAAgB;EAAE;EAClBF,cAAc,EACdN,gBAAgB,CACdX,eAAe,CACbF,gBAAgB,CAACY,OAAO,CAAC;EAAE;EAC3BN,KAAK,EACLc;EACA;EAAA,CACD,CACF,CACF;;EAED,MAAMG,SAAS,GAAGd,YAAY,CAACa,KAAK,CAAC;EAErCF,cAAc,CAACI,GAAG,CAAChB,QAAQ,CAAC;EAE5B,OAAO;IAAEc,KAAK;IAAEC;EAAU,CAAC;AAC7B"},"metadata":{},"sourceType":"module"}