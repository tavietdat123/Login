{"ast":null,"code":"const getCanvasBlob = canvas => {\n  return new Promise(function (resolve) {\n    canvas.toBlob(blob => {\n      resolve(blob);\n    }, 'image/jpeg', 1);\n  });\n};\nexport const generateAvatarUpload = async (canvas, crop) => {\n  if (!crop || !canvas) {\n    return null;\n  }\n  let file = null;\n  const blobCanvas = await getCanvasBlob(canvas);\n  file = new File([blobCanvas], 'avatar.jpeg', {\n    type: 'image/jpeg'\n  });\n  return file;\n};","map":{"version":3,"names":["getCanvasBlob","canvas","Promise","resolve","toBlob","blob","generateAvatarUpload","crop","file","blobCanvas","File","type"],"sources":["D:/TYSCRIPT/Store Intern PG/login/src/utils/upload.ts"],"sourcesContent":["const getCanvasBlob = (canvas: any): any => {\r\n  return new Promise(function (resolve) {\r\n    canvas.toBlob(\r\n      (blob: any) => {\r\n        resolve(blob);\r\n      },\r\n      'image/jpeg',\r\n      1,\r\n    );\r\n  });\r\n};\r\n\r\nexport const generateAvatarUpload = async (canvas: any, crop: any) => {\r\n  if (!crop || !canvas) {\r\n    return null;\r\n  }\r\n  let file = null;\r\n  const blobCanvas: Blob = await getCanvasBlob(canvas);\r\n  file = new File([blobCanvas], 'avatar.jpeg', { type: 'image/jpeg' });\r\n  return file;\r\n};\r\n"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,MAAW,IAAU;EAC1C,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAE;IACpCF,MAAM,CAACG,MAAM,CACVC,IAAS,IAAK;MACbF,OAAO,CAACE,IAAI,CAAC;IACf,CAAC,EACD,YAAY,EACZ,CAAC,CACF;EACH,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOL,MAAW,EAAEM,IAAS,KAAK;EACpE,IAAI,CAACA,IAAI,IAAI,CAACN,MAAM,EAAE;IACpB,OAAO,IAAI;EACb;EACA,IAAIO,IAAI,GAAG,IAAI;EACf,MAAMC,UAAgB,GAAG,MAAMT,aAAa,CAACC,MAAM,CAAC;EACpDO,IAAI,GAAG,IAAIE,IAAI,CAAC,CAACD,UAAU,CAAC,EAAE,aAAa,EAAE;IAAEE,IAAI,EAAE;EAAa,CAAC,CAAC;EACpE,OAAOH,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module"}